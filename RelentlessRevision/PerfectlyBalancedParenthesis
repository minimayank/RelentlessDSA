package Revision;
/*


          ██████████████████████████████████████
        ██████████████████████████████████████████
      ██████   ████████████████████████████   ██████
    █████    ████████████  ████  ████████████    █████
    ███      ████████████        ████████████      ███
    ███                                            ███
    ███                                            ███
    ███      █████████  ████  ████  █████████      ███
    █████    ███████████████  ███████████████    █████
      ██████   ████████████████████████████   ██████
        ██████████████████████████████████████████
          ██████████████████████████████████████
 *
* */
import java.util.*;
public class PerfectlyBalancedParenthesis {

    public static boolean isBalanced(Character a,Character b){
        return ((a=='('&& b==')'
                ||
                a=='['&&b==']'
                ||
                a=='{'&&b=='}'));
    }
    public static boolean perfectlyBalanced(String expression)
    {
        if(expression.length()==0)return true;
        else {
            Deque<Character> stack = new ArrayDeque<>();
            for(int i=0;i<expression.length();i++) {
                Character c = expression.charAt(i);
                if (c == '(' || c == '[' || c == '{') {
                    stack.push(c);
                } else {
                    if (stack.isEmpty()) return false;
                    if (!isBalanced(stack.peek(),c ))return false;
                    else{
                        stack.pop();
                    }
                }
            }
            return (stack.isEmpty());
        }
    }
    public static void main(String[] args) {
         String expression="{[()]}";
         String expression2="";

        System.out.println(perfectlyBalanced(expression));

    }
}
